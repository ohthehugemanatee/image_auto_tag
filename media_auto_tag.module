<?php
declare(strict_types = 1);
/**
 * @file
 * Procedural code for media_auto_tag module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media_auto_tag\AzureCognitiveServices;
use Drupal\media_auto_tag\Entity\PersonMap;
use GuzzleHttp\Exception\TransferException;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a setting for face detection on image fields.
 */
function media_auto_tag_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\field\FieldConfigInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity->getFieldStorageDefinition()->getType() === 'image') {
    $form['third_party_settings']['media_auto_tag']['detect_faces'] = [
      '#type' => 'checkbox',
      '#title' => t('Detect faces in uploaded images'),
      '#description' => t('Submit images for face detection using Media Auto Tag module.'),
      '#default_value' => $entity->getThirdPartySetting('media_auto_tag', 'detect_faces'),
    ];
    // If the module isn't configured yet.
    if (\Drupal::config('media_auto_tag.settings')->get('person_entity_bundle') === NULL) {
      $form['third_party_settings']['media_auto_tag']['detect_faces'] = [
          '#description' => t('Submit images for face detection using Media Auto Tag module.  You must configure the module before you can use it!'),
          '#disabled' => TRUE,
        ] + $form['third_party_settings']['media_auto_tag']['detect_faces'];
      return;
    }
    // Build a list of entity reference fields pointing to the right type.
    $tagFieldOptions = [];
    // Look up "the right type" in config.
    $targetEntityBundleString = \Drupal::config('media_auto_tag.settings')->get('person_entity_bundle');
    list($targetEntityType, $targetEntityBundle) = explode('.', $targetEntityBundleString);
    $fieldInstances = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity->getTargetEntityTypeId(), $entity->getTargetBundle());
    foreach ($fieldInstances as $fieldName => $fieldInstance) {
      // If it's an entity reference pointing at the right type.
      if ($fieldInstance->getType() === 'entity_reference' && $fieldInstance->getSettings()['target_type'] === $targetEntityType) {
        $tagFieldOptions[$fieldName] = $fieldName;
      }
    }
    if ($tagFieldOptions === []) {
      $form['third_party_settings']['media_auto_tag']['detect_faces'] = [
          '#description' => t('Submit images for face detection using Media Auto Tag module.  No entity reference field found on this bundle, which references the "people" type defined in settings. Please check your settings for media_auto_tag and try again.'),
          '#disabled' => TRUE,
        ] + $form['third_party_settings']['media_auto_tag']['detect_faces'];
    }
    else {
      $form['third_party_settings']['media_auto_tag']['tag_field'] = [
        '#title' => t('Tag field'),
        '#description' => t('The field which will receive tags based on face recognition. Manual entries into this field will be overwritten when detection is performed!'),
        '#type' => 'select',
        '#options' => $tagFieldOptions,
        '#default_value' => $entity->getThirdPartySetting('media_auto_tag', 'tag_field'),
        '#states' => [
          'visible' => [
            ':input[name="third_party_settings[media_auto_tag][detect_faces]"]' => ['checked' => TRUE],
          ],
        ],
      ];
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function media_auto_tag_entity_insert(EntityInterface $entity) {
  if (!($entity instanceof ContentEntityInterface)) {
    return;
  }
  $config = \Drupal::config('media_auto_tag.settings');
  $processed = FALSE;
  // Check entity type and bundle.
  $targetEntityBundleString = $config->get('person_entity_bundle');
  list($targetEntityType, $targetEntityBundle) = explode('.', $targetEntityBundleString);
  // If the entity is our "people" entity, create person and submit faces.
  if ($entity->getEntityTypeId() === $targetEntityType && $entity->bundle() === $targetEntityBundle) {
    _media_create_person($entity);
    _media_create_faces($entity);
  }
  // If the entity has a field that should have face detection performed, submit images and tag.
  foreach ($entity->getFieldDefinitions() as $fieldDefinition) {
    if ($fieldDefinition->getType() === 'image' && $fieldDefinition->getThirdPartySetting('media_auto_tag', 'detect_faces')) {
      $peopleEntities = _media_do_face_detection($entity, $fieldDefinition);
      if (!empty($peopleEntities)) {
        // Apply this as the target field value.
        $targetTagField = $fieldDefinition->getThirdPartySetting('media_auto_tag', 'tag_field');
        $entity->set($targetTagField, $peopleEntities);
        $processed = TRUE;
      }
      $count = count($peopleEntities);
      \Drupal::messenger()->addStatus("Detected {$count} faces.");
    }
  }
  if ($processed) {
    $entity->save();
  }
}

/**
 * Implements hook_entity_update().
 */
function media_auto_tag_entity_update(EntityInterface $entity) {
  if (!($entity instanceof ContentEntityInterface)) {
    return;
  }
  $config = \Drupal::config('media_auto_tag.settings');
  // Check entity type and bundle.
  $targetEntityBundleString = $config->get('person_entity_bundle');
  list($targetEntityType, $targetEntityBundle) = explode('.', $targetEntityBundleString);
  // If the entity is our "people" entity, check faces.
  if ($entity->getEntityTypeId() === $targetEntityType && $entity->bundle() === $targetEntityBundle) {
    /** @var \Drupal\media_auto_tag\AzureCognitiveServices $azure */
    $azure = \Drupal::service('media_auto_tag.azure');
    // Check availability of the service.
    if ($azure->serviceStatus()) {
      // Do we have a person record yet?
      $personMapResult = \Drupal::entityQuery('media_auto_tag_person_map')
        ->condition('local_id', $entity->id())
        ->condition('local_entity_type', $entity->getEntityTypeId())
        ->execute();
      // If we don't have a record, create one on Azure.
      if ($personMapResult === []) {
        _media_create_person($entity);
        _media_create_faces($entity);
      }
      else {
        /** @var PersonMap[] $personMaps */
        $personMaps = PersonMap::loadMultiple($personMapResult);
        $personMap = reset($personMaps);
        // Otherwise, update the existing Person on Azure.
        if ($entity->label() !== $entity->original->label()) {
          $azure->updatePerson(AzureCognitiveServices::PEOPLE_GROUP, $personMap->getForeignId(), $entity->label());
        }
        // If the faces image field value has changed.
        $targetImageField = explode('.', $config->get('person_image_field'))[1];
        $imageFilesArray = $entity->get($targetImageField)->getValue();
        if ($imageFilesArray !== $entity->original->get($targetImageField)->getValue()) {
          // Make sure all the local images exist on the remote.
          foreach ($imageFilesArray as $index => $value) {
            /** @var \Drupal\Core\Image\Image $image */
            $image = $entity->get($targetImageField)->get($index);
            $personMapResult = \Drupal::entityQuery('media_auto_tag_person_map')
              ->condition('local_id', $image->entity->id())
              ->condition('local_entity_type', 'file')
              ->execute();
            // If this image doesn't have a personMap yet, upload it as a face.
            if ($personMapResult === []) {
              try {
                $imagePath = $image->entity->getFileUri();
                $faceId = $azure->addFace(AzureCognitiveServices::PEOPLE_GROUP, $personMap->getForeignId(), $imagePath);
                PersonMap::create([
                  'foreign_id' => $faceId->persistedFaceId,
                  'local_id' => $image->entity->id(),
                  'local_entity_type' => 'file',
                ])->save();
              }
              catch (TransferException $e) {
                \Drupal::messenger()->addWarning(t('Unable to submit face images to Azure for processing. Error: %code : %msg.',
                  [
                    '%code' => $e->getCode(),
                    '%msg' => $e->getMessage(),
                  ]
                ));
              }
            }
          }
          // Delete any remote images that aren't on local.
          $personRecord = $azure->getPerson(AzureCognitiveServices::PEOPLE_GROUP, $personMap->getForeignId());
          $faceIds = $personRecord->persistedFaceIds;
          $personMapResult = \Drupal::entityQuery('media_auto_tag_person_map')
            ->condition('foreign_id', $faceIds, 'IN')
            ->condition('local_entity_type', 'file')
            ->execute();
          if (count($personMapResult) !== count($faceIds)) {
            $personMaps = PersonMap::loadMultiple($personMapResult);
            $foreignIds = [];
            foreach ($personMaps as $personMap) {
              $foreignIds[] = $personMap->getForeignId();
            }
            $missingFaces = array_diff($foreignIds, $faceIds);
            // Delete any faces that exist on foreign, but not local.
            foreach ($missingFaces as $missingFace) {
              $azure->deleteFace(AzureCognitiveServices::PEOPLE_GROUP, $personMap->getForeignId(), $missingFace);
            }
          }
        }
      }
    }
  }

  // If the entity has a field that should have face detection performed, submit
  // images and tag.
  foreach ($entity->getFieldDefinitions() as $fieldDefinition) {
    if ($fieldDefinition->getType() === 'image' && $fieldDefinition->getThirdPartySetting('media_auto_tag', 'detect_faces')) {
      _media_do_face_detection($entity, $fieldDefinition);
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Clean up when a mapped entity is deleted.
 */
function media_auto_tag_entity_delete(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    $personMapResult = \Drupal::entityQuery('media_auto_tag_person_map')
      ->condition('local_id', $entity->id())
      ->condition('local_entity_type', $entity->getEntityTypeId())
      ->execute();
    if ($personMapResult > 0) {
      /** @var \Drupal\media_auto_tag\Entity\PersonMap $personMaps */
      $personMaps = PersonMap::loadMultiple($personMapResult);
      foreach ($personMaps as $personMap) {
        $personMap->delete();
      }
    }
  }
}

/**
 * Submit faces for an entity.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity containing faces to submit.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \GuzzleHttp\Exception\GuzzleException
 */
function _media_create_person(ContentEntityInterface $entity) {
  /** @var \Drupal\media_auto_tag\AzureCognitiveServices $azure */
  $azure = \Drupal::service('media_auto_tag.azure');
  // Check availability of the service.
  if ($azure->serviceStatus()) {
    // Create the Person record.
    $person = $azure->createPerson(AzureCognitiveServices::PEOPLE_GROUP, $entity->label());
    $personId = $person->personId;
    // Create the personMap record.
    PersonMap::create([
      'foreign_id' => $personId,
      'local_id' => $entity->id(),
      'local_entity_type' => $entity->getEntityTypeId(),
    ])->save();
  }
}

/**
 * Create faces for a given entity and personId.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The Content Entity representing the person.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function _media_create_faces(ContentEntityInterface $entity) {
  $config = \Drupal::config('media_auto_tag.settings');
  // Submit each value on the image field as a "face".
  $targetImageField = explode('.', $config->get('person_image_field'))[1];
  // Look up the remote personId.
  $personMapResult = \Drupal::entityQuery('media_auto_tag_person_map')
    ->condition('local_id', $entity->id())
    ->condition('local_entity_type', $entity->getEntityTypeId())
    ->execute();
  if ($personMapResult === []) {
    return;
  }
  $personMap = PersonMap::load(reset($personMapResult));
  $personId = $personMap->getForeignId();
  /** @var \Drupal\media_auto_tag\AzureCognitiveServices $azure */
  $azure = \Drupal::service('media_auto_tag.azure');
  foreach ($entity->get($targetImageField)->getValue() as $index => $value) {
    /** @var \Drupal\Core\Image\Image $image */
    $image = $entity->get($targetImageField)->get($index);
    $imagePath = $image->entity->getFileUri();
    try {
      $faceId = $azure->addFace(AzureCognitiveServices::PEOPLE_GROUP, $personId, $imagePath);
      PersonMap::create([
        'foreign_id' => $faceId->persistedFaceId,
        'local_id' => $image->entity->id(),
        'local_entity_type' => 'file',
      ])->save();
    }
    catch (TransferException $e) {
      \Drupal::messenger()->addWarning(t('Unable to submit face images to Azure for processing. Error: %code : %msg.',
        [
          '%code' => $e->getCode(),
          '%msg' => $e->getMessage(),
        ]
      ));
    }
  }
}

/**
 * Run face detection on a given entity and image field.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The target entity.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
 *   The target image field.
 *
 * @return array
 *   An array of the people entities whose faces were detected.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \GuzzleHttp\Exception\GuzzleException
 */
function _media_do_face_detection(EntityInterface $entity, FieldDefinitionInterface $fieldDefinition) {
  /** @var \Drupal\media_auto_tag\AzureCognitiveServices $azure */
  $azure = \Drupal::service('media_auto_tag.azure');
  // Check availability of the service.
  if ($azure->serviceStatus()) {
    $fileUri = $entity->{$fieldDefinition->getName()}->entity->getFileUri();
    $detectedFaces = $azure->detectFaces($fileUri);
    if (!empty($detectedFaces)) {
      // Identify detected faces.
      $facesToIdentify = [];
      foreach ($detectedFaces as $detectedFace) {
        $facesToIdentify[] = $detectedFace->faceId;
      }
      $identifiedFaces = $azure->identifyFaces(array_slice($facesToIdentify, 0, 10), AzureCognitiveServices::PEOPLE_GROUP);
      if (empty($identifiedFaces)) {
        return [];
      }
      // Loop over the identified faces and tag with their Drupal entities.
      $personIds = [];
      foreach ($identifiedFaces as $identifiedFace) {
        // Take the first candidate.
        if ($identifiedFace->candidates !== []) {
          $personIds[] = $identifiedFace->candidates[0]->personId;
        }
      }
      $personMapResult = \Drupal::entityQuery('media_auto_tag_person_map')
        ->condition('foreign_id', $personIds, 'IN')
        ->execute();
      /* @var PersonMap[] $personMaps */
      $personMaps = PersonMap::loadMultiple($personMapResult);
      $peopleEntities = [];
      foreach ($personMaps as $personMap) {
        $peopleEntities[] = $personMap->getLocalEntity();
      }
      return $peopleEntities;
    }
  }
}
