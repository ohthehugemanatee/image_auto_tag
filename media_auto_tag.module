<?php
declare(strict_types = 1);
/**
* @file
* Procedural code for media_ai_tag module.
*/

use Drupal\Core\Entity\EntityInterface;
use Drupal\media\MediaInterface;

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * @param \Drupal\media\MediaInterface $media
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function media_auto_tag_media_insert(MediaInterface $media) {
  $allowedBundles = [
    'video',
    'image',
  ];
  if (in_array($media->bundle(), $allowedBundles, TRUE)) {
    // Get the tags for the entity.
    $tags = _media_auto_tag_process_entity($media);
    if (!empty($tags)) {
      // Apply the tags for the entity.
      _media_auto_tag_apply_tags($media, $tags);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update.
 *
 * @param \Drupal\media\MediaInterface $media
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function media_auto_tag_media_update(MediaInterface $media) {
  // If the file has changed.
  $source_field_name = $media->getSource()->getConfiguration()['source_field'];
  $current_items = $media->get($source_field_name);
  if (isset($media->original) && !$current_items->equals($media->original->get($source_field_name))) {
    // Get the tags for the entity.
    $tags = _media_auto_tag_process_entity($media);
    if (!empty($tags)) {
      // Apply the tags for the entity.
      _media_auto_tag_apply_tags($media, $tags);
    }
  }
}

/**
 * Process entity content to generate tags.
 *
 * @param \Drupal\media\MediaInterface $media
 *   The media entity to be processed.
 *
 * @return array
 *   The tags generated from the media item.
 */
function _media_auto_tag_process_entity(MediaInterface $media) : array {
  // Get the file itself.
  $sourceFieldName = $media->getSource()->getConfiguration()['source_field'];
  /** @var \Drupal\Core\Field\FieldItemList $currentItems */
  $currentItems = $media->get($sourceFieldName);
  if (!$currentItems->isEmpty()) {
    $tagsResult = [];
    foreach ($currentItems as $delta => $currentItem) {
      $allowedTypes = [
        'video',
      ];
      // If the file is an appropriate type.
      if (in_array($currentItems->getDataDefinition()
        ->getDataType(), $allowedTypes, FALSE)) {
        // Add to the results array.
        $tagsResult[$delta] = _media_auto_tag_get_tags($file);
      }
    }
    return $tagsResult;
  }
  return [];
}

/**
 * Pass a file to the recognition/classification system.
 *
 * @param $file
 *   The source file.
 *
 * @return array
 *   An array of tags.
 */
function _media_auto_tag_get_tags($file) {
  $tags = [];
  // Pass the file to the recognition engine.
  // Pass the result to the classification engine.
  return $tags;
}

/**
 * Apply an array of tags to a media object.
 *
 * @param \Drupal\media\MediaInterface $media
 *   The source Media entity.
 * @param array $tags
 *   The tags to be applied.
 *
 * @return int
 *   SAVED_NEW or SAVED_UPDATED is returned depending on the operation.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 *   In case of failures, an exception is thrown.
 */
function _media_auto_tag_apply_tags(MediaInterface $media, array $tags) {
  // Get the mapping for tags:fields.
  // Apply the mapping.
  return $media->save();
}
