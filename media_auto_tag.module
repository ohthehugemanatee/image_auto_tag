<?php
declare(strict_types = 1);
/**
* @file
* Procedural code for media_ai_tag module.
*/

use Drupal\Core\Entity\EntityInterface;
use Drupal\media\MediaInterface;
use GuzzleHttp\Exception\ClientException;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a setting for face detection on image fields.
 */
function media_auto_tag_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\field\FieldConfigInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity->getFieldStorageDefinition()->getType() === 'image') {
    $form['third_party_settings']['media_auto_tag']['detect_faces'] = [
      '#type' => 'checkbox',
      '#title' => t('Detect faces in uploaded images'),
      '#description' => t('Submit images for face detection using Media Auto Tag module.'),
      '#default_value' => $entity->getThirdPartySetting('media_auto_tag', 'detect_faces'),
    ];
    // Build a list of entity reference fields pointing to the right type.
    $tagFieldOptions = [];
    // Look up "the right type" in config.
    $targetEntityBundleString = \Drupal::config('media_auto_tag.settings')->get('person_entity_bundle');
    list($targetEntityType, $targetEntityBundle) = explode('.', $targetEntityBundleString);
    $fieldInstances = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity->getTargetEntityTypeId(), $entity->getTargetBundle());
    foreach ($fieldInstances as $fieldName => $fieldInstance) {
      // If it's an entity reference pointing at the right type.
      if ($fieldInstance->getType() === 'entity_reference' && $fieldInstance->getSettings()['target_type'] === $targetEntityType) {
        $tagFieldOptions[$fieldName] = $fieldName;
      }
    }
    if ($tagFieldOptions === []) {
      $form['third_party_settings']['media_auto_tag']['detect_faces'] = [
        '#description' => t('Submit images for face detection using Media Auto Tag module.  No entity reference field found on this bundle, which references the "people" type defined in settings. Please check your settings for media_auto_tag and try again.'),
        '#disabled' => TRUE,
      ] + $form['third_party_settings']['media_auto_tag']['detect_faces'];
    }
    else {
      $form['third_party_settings']['media_auto_tag']['tag_field'] = [
        '#title' => t('Tag field'),
        '#description' => t('The field which will receive tags based on face recognition. Manual entries into this field will be overwritten when detection is performed!'),
        '#type' => 'select',
        '#options' => $tagFieldOptions,
        '#default_value' => $entity->getThirdPartySetting('media_auto_tag', 'tag_field'),
        '#states' => [
          'visible' => [
            ':input[name="third_party_settings[media_auto_tag][detect_faces]"]' => ['checked' => TRUE],
          ],
        ],
      ];
    }
  }
}

function media_auto_tag_test(string $action) {
  /** @var \Drupal\media_auto_tag\AzureCognitiveServices $service */
  $service = \Drupal::service('media_auto_tag.azure');
  switch ($action) {
    case 'listPersonGroups':
      return $service->listPersonGroups();

    case 'detectFaces':
      return $service->detectFaces('/tmp/detect-faces.jpg');

  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * {@inheritdoc}
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 *   If we fail to save the entity tags.
 */
function media_auto_tag_media_insert(MediaInterface $media) {
  $allowedBundles = [
    'video',
    'image',
  ];
  if (in_array($media->bundle(), $allowedBundles, TRUE)) {
    // Get the tags for the entity.
    $tags = _media_auto_tag_process_entity($media);
    if (!empty($tags)) {
      // Apply the tags for the entity.
      //_media_auto_tag_apply_tags($media, $tags);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * {@inheritdoc}
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function media_auto_tag_media_update(MediaInterface $media) {
  // If the file has changed.
  $source_field_name = $media->getSource()->getConfiguration()['source_field'];
  $current_items = $media->get($source_field_name);
  if (isset($media->original) && !$current_items->equals($media->original->get($source_field_name))) {
    // Get the tags for the entity.
    $tags = _media_auto_tag_process_entity($media);
    if (!empty($tags)) {
      // Apply the tags for the entity.
      //_media_auto_tag_apply_tags($media, $tags);
    }
  }
}

/**
 * Process entity content to generate tags.
 *
 * @param \Drupal\media\MediaInterface $media
 *   The media entity to be processed.
 *
 * @return array
 *   The tags generated from the media item.
 */
function _media_auto_tag_process_entity(MediaInterface $media) : array {
  // Get the file itself.
  $sourceFieldName = $media->getSource()->getConfiguration()['source_field'];
  /** @var \Drupal\Core\Field\FieldItemList $currentItems */
  $currentItems = $media->get($sourceFieldName);
  if (!$currentItems->isEmpty()) {
    $tagsResult = [];
    foreach ($currentItems as $delta => $currentItem) {
      $allowedTypes = [
        'video',
      ];
      // If the file is an appropriate type.
      if (in_array($currentItems->getDataDefinition()
        ->getDataType(), $allowedTypes, FALSE)) {
        // Add to the results array.
        $tagsResult[$delta] = _media_auto_tag_get_tags($file);
      }
    }
    return $tagsResult;
  }
  return [];
}

/**
 * Pass a file to the recognition/classification system.
 *
 * @return array
 *   An array of tags.
 */
function _media_auto_tag_get_tags() {
  $tags = [];
  $file = '/tmp/file.jpg';
  $faceDetectionResult = _media_auto_tag_detect_faces($file);
  // Pass the file to the recognition engine.
  // Pass the result to the classification engine.
  return $tags;
}


/**
 * Apply an array of tags to a media object.
 *
 * @param \Drupal\media\MediaInterface $media
 *   The source Media entity.
 * @param array $tags
 *   The tags to be applied.
 *
 * @return int
 *   SAVED_NEW or SAVED_UPDATED is returned depending on the operation.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 *   In case of failures, an exception is thrown.
 */
function _media_auto_tag_apply_tags(MediaInterface $media, array $tags) {
  // Get the mapping for tags:fields.
  // Apply the mapping.
  return $media->save();
}

